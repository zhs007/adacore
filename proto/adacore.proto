syntax = "proto3";
package adacorepb;

// MarkdownData - markdown data
message MarkdownData{
	// strData - markdown string data
	string strData = 1;
	// binaryData - binary data map, it's like images
	map<string, bytes> binaryData = 2;

	// templateName - template Name
	string templateName = 10;
	// templateData - template data
	string templateData = 11;  
}

// MarkdownStream - markdown stream data
message MarkdownStream {
	// totalLength - If the message is too long, it will send data in multiple msg, this is the total length.
	int32 totalLength = 1;
	// curStart - The starting point of the current data (in bytes).
	int32 curStart = 2;
	// curLength - The length of the current data (in bytes).
	int32 curLength = 3;
	// hashData - This is the hash of each paragraph.
	string hashData = 4;
	// totalHashData - If multiple messages return data, this is the hash value of all data, only sent in the last message.
	string totalHashData = 5;
	// data - binary data
	bytes data = 6;

	// error - error string
	string error = 100;

	// markdownData - If the data does not exceed 4mb, this is the data that is directly available.
	MarkdownData markdownData = 200;

	// token - API token
	string token = 300;
}

// ResourceType - resource type 
enum ResourceType {
	// RT_PAGE - This is a page
	RT_PAGE = 0;
	// RT_OTHER - This is other resource
	RT_OTHER = 1;
}

// ResourceInfo - resource infomation 
message ResourceInfo {
	// hashName - hashname
	string hashName = 1;
	// citedTimes - cited times
	int32 citedTimes = 2;
	// createTime - Creation time in seconds
	int64 createTime = 3;
	// type - resource type
	ResourceType type = 4;

	// children - children resource hashname
	repeated string children = 10;
}

// ReplyMarkdown - reply 
message ReplyMarkdown {
	// url - url
	string url = 1;
	// hashName - hashname
	string hashName = 2;

	// lstRes - resource list
	repeated ResourceInfo lstRes = 10;
}

// AdaCoreService - AdaCore service
service AdaCoreService {
	// buildWithMarkdown - build with markdown
	rpc buildWithMarkdown(stream MarkdownStream) returns (ReplyMarkdown) {}
}