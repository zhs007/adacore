// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: adarender.proto

package adarenderpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// MarkdownData - markdown data
type MarkdownData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// strData - markdown string
	StrData string `protobuf:"bytes,1,opt,name=strData,proto3" json:"strData,omitempty"`
	// binaryData - binary data, it's like images
	BinaryData map[string][]byte `protobuf:"bytes,2,rep,name=binaryData,proto3" json:"binaryData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// templateName - template Name
	TemplateName string `protobuf:"bytes,10,opt,name=templateName,proto3" json:"templateName,omitempty"`
	// templateData - template data
	TemplateData string `protobuf:"bytes,11,opt,name=templateData,proto3" json:"templateData,omitempty"`
}

func (x *MarkdownData) Reset() {
	*x = MarkdownData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adarender_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkdownData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkdownData) ProtoMessage() {}

func (x *MarkdownData) ProtoReflect() protoreflect.Message {
	mi := &file_adarender_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkdownData.ProtoReflect.Descriptor instead.
func (*MarkdownData) Descriptor() ([]byte, []int) {
	return file_adarender_proto_rawDescGZIP(), []int{0}
}

func (x *MarkdownData) GetStrData() string {
	if x != nil {
		return x.StrData
	}
	return ""
}

func (x *MarkdownData) GetBinaryData() map[string][]byte {
	if x != nil {
		return x.BinaryData
	}
	return nil
}

func (x *MarkdownData) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *MarkdownData) GetTemplateData() string {
	if x != nil {
		return x.TemplateData
	}
	return ""
}

// MarkdownStream - markdown stream data
type MarkdownStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// totalLength - If the message is too long, it will send data in multiple msg, this is the total length.
	TotalLength int32 `protobuf:"varint,1,opt,name=totalLength,proto3" json:"totalLength,omitempty"`
	// curStart - The starting point of the current data (in bytes).
	CurStart int32 `protobuf:"varint,2,opt,name=curStart,proto3" json:"curStart,omitempty"`
	// curLength - The length of the current data (in bytes).
	CurLength int32 `protobuf:"varint,3,opt,name=curLength,proto3" json:"curLength,omitempty"`
	// hashData - This is the hash of each paragraph.
	HashData string `protobuf:"bytes,4,opt,name=hashData,proto3" json:"hashData,omitempty"`
	// totalHashData - If multiple messages return data, this is the hash value of all data, only sent in the last message.
	TotalHashData string `protobuf:"bytes,5,opt,name=totalHashData,proto3" json:"totalHashData,omitempty"`
	// data - binary data
	Data []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	// error - error string
	Error string `protobuf:"bytes,100,opt,name=error,proto3" json:"error,omitempty"`
	// markdownData - If the data does not exceed 4mb, this is the data that is directly available.
	MarkdownData *MarkdownData `protobuf:"bytes,200,opt,name=markdownData,proto3" json:"markdownData,omitempty"`
	// token - API token
	Token string `protobuf:"bytes,300,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *MarkdownStream) Reset() {
	*x = MarkdownStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adarender_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkdownStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkdownStream) ProtoMessage() {}

func (x *MarkdownStream) ProtoReflect() protoreflect.Message {
	mi := &file_adarender_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkdownStream.ProtoReflect.Descriptor instead.
func (*MarkdownStream) Descriptor() ([]byte, []int) {
	return file_adarender_proto_rawDescGZIP(), []int{1}
}

func (x *MarkdownStream) GetTotalLength() int32 {
	if x != nil {
		return x.TotalLength
	}
	return 0
}

func (x *MarkdownStream) GetCurStart() int32 {
	if x != nil {
		return x.CurStart
	}
	return 0
}

func (x *MarkdownStream) GetCurLength() int32 {
	if x != nil {
		return x.CurLength
	}
	return 0
}

func (x *MarkdownStream) GetHashData() string {
	if x != nil {
		return x.HashData
	}
	return ""
}

func (x *MarkdownStream) GetTotalHashData() string {
	if x != nil {
		return x.TotalHashData
	}
	return ""
}

func (x *MarkdownStream) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MarkdownStream) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *MarkdownStream) GetMarkdownData() *MarkdownData {
	if x != nil {
		return x.MarkdownData
	}
	return nil
}

func (x *MarkdownStream) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// HTMLData - HTML data
type HTMLData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// strData - HTML string
	StrData string `protobuf:"bytes,1,opt,name=strData,proto3" json:"strData,omitempty"`
	// binaryData - binary data, it's like images, css file
	BinaryData map[string][]byte `protobuf:"bytes,2,rep,name=binaryData,proto3" json:"binaryData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HTMLData) Reset() {
	*x = HTMLData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adarender_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTMLData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTMLData) ProtoMessage() {}

func (x *HTMLData) ProtoReflect() protoreflect.Message {
	mi := &file_adarender_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTMLData.ProtoReflect.Descriptor instead.
func (*HTMLData) Descriptor() ([]byte, []int) {
	return file_adarender_proto_rawDescGZIP(), []int{2}
}

func (x *HTMLData) GetStrData() string {
	if x != nil {
		return x.StrData
	}
	return ""
}

func (x *HTMLData) GetBinaryData() map[string][]byte {
	if x != nil {
		return x.BinaryData
	}
	return nil
}

// HTMLStream - HTML data stream
type HTMLStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// totalLength - If the message is too long, it will send data in multiple msg, this is the total length.
	TotalLength int32 `protobuf:"varint,1,opt,name=totalLength,proto3" json:"totalLength,omitempty"`
	// curStart - The starting point of the current data (in bytes).
	CurStart int32 `protobuf:"varint,2,opt,name=curStart,proto3" json:"curStart,omitempty"`
	// curLength - The length of the current data (in bytes).
	CurLength int32 `protobuf:"varint,3,opt,name=curLength,proto3" json:"curLength,omitempty"`
	// hashData - This is the hash of each paragraph.
	HashData string `protobuf:"bytes,4,opt,name=hashData,proto3" json:"hashData,omitempty"`
	// totalHashData - If multiple messages return data, this is the hash value of all data, only sent in the last message.
	TotalHashData string `protobuf:"bytes,5,opt,name=totalHashData,proto3" json:"totalHashData,omitempty"`
	// data - binary data
	Data []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	// error - error string
	Error string `protobuf:"bytes,100,opt,name=error,proto3" json:"error,omitempty"`
	// markdownData - If the data does not exceed 4mb, this is the data that is directly available.
	HtmlData *HTMLData `protobuf:"bytes,200,opt,name=htmlData,proto3" json:"htmlData,omitempty"`
}

func (x *HTMLStream) Reset() {
	*x = HTMLStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adarender_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTMLStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTMLStream) ProtoMessage() {}

func (x *HTMLStream) ProtoReflect() protoreflect.Message {
	mi := &file_adarender_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTMLStream.ProtoReflect.Descriptor instead.
func (*HTMLStream) Descriptor() ([]byte, []int) {
	return file_adarender_proto_rawDescGZIP(), []int{3}
}

func (x *HTMLStream) GetTotalLength() int32 {
	if x != nil {
		return x.TotalLength
	}
	return 0
}

func (x *HTMLStream) GetCurStart() int32 {
	if x != nil {
		return x.CurStart
	}
	return 0
}

func (x *HTMLStream) GetCurLength() int32 {
	if x != nil {
		return x.CurLength
	}
	return 0
}

func (x *HTMLStream) GetHashData() string {
	if x != nil {
		return x.HashData
	}
	return ""
}

func (x *HTMLStream) GetTotalHashData() string {
	if x != nil {
		return x.TotalHashData
	}
	return ""
}

func (x *HTMLStream) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *HTMLStream) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *HTMLStream) GetHtmlData() *HTMLData {
	if x != nil {
		return x.HtmlData
	}
	return nil
}

var File_adarender_proto protoreflect.FileDescriptor

var file_adarender_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x64, 0x61, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x61, 0x64, 0x61, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0xf8, 0x01, 0x0a,
	0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x74, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x64,
	0x61, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3d, 0x0a, 0x0f, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x02, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x75, 0x72,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x48, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x64, 0x61, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x15, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa8, 0x01, 0x0a, 0x08, 0x48, 0x54, 0x4d, 0x4c,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43,
	0x0a, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x61, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x48,
	0x54, 0x4d, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x3d, 0x0a, 0x0f, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x86, 0x02, 0x0a, 0x0a, 0x48, 0x54, 0x4d, 0x4c, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x75, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x08, 0x68, 0x74, 0x6d,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x64, 0x61, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x54, 0x4d, 0x4c, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x68, 0x74, 0x6d, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x32, 0x54, 0x0a, 0x10, 0x41,
	0x64, 0x61, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x40, 0x0a, 0x06, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x61, 0x64, 0x61, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x1a, 0x15, 0x2e, 0x61, 0x64, 0x61, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x2e, 0x48, 0x54, 0x4d, 0x4c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x7a, 0x68, 0x73, 0x30, 0x30, 0x37, 0x2f, 0x61, 0x64, 0x61, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61,
	0x64, 0x61, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_adarender_proto_rawDescOnce sync.Once
	file_adarender_proto_rawDescData = file_adarender_proto_rawDesc
)

func file_adarender_proto_rawDescGZIP() []byte {
	file_adarender_proto_rawDescOnce.Do(func() {
		file_adarender_proto_rawDescData = protoimpl.X.CompressGZIP(file_adarender_proto_rawDescData)
	})
	return file_adarender_proto_rawDescData
}

var file_adarender_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_adarender_proto_goTypes = []interface{}{
	(*MarkdownData)(nil),   // 0: adarender.MarkdownData
	(*MarkdownStream)(nil), // 1: adarender.MarkdownStream
	(*HTMLData)(nil),       // 2: adarender.HTMLData
	(*HTMLStream)(nil),     // 3: adarender.HTMLStream
	nil,                    // 4: adarender.MarkdownData.BinaryDataEntry
	nil,                    // 5: adarender.HTMLData.BinaryDataEntry
}
var file_adarender_proto_depIdxs = []int32{
	4, // 0: adarender.MarkdownData.binaryData:type_name -> adarender.MarkdownData.BinaryDataEntry
	0, // 1: adarender.MarkdownStream.markdownData:type_name -> adarender.MarkdownData
	5, // 2: adarender.HTMLData.binaryData:type_name -> adarender.HTMLData.BinaryDataEntry
	2, // 3: adarender.HTMLStream.htmlData:type_name -> adarender.HTMLData
	1, // 4: adarender.AdaRenderService.render:input_type -> adarender.MarkdownStream
	3, // 5: adarender.AdaRenderService.render:output_type -> adarender.HTMLStream
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_adarender_proto_init() }
func file_adarender_proto_init() {
	if File_adarender_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_adarender_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkdownData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adarender_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkdownStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adarender_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTMLData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adarender_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTMLStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_adarender_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_adarender_proto_goTypes,
		DependencyIndexes: file_adarender_proto_depIdxs,
		MessageInfos:      file_adarender_proto_msgTypes,
	}.Build()
	File_adarender_proto = out.File
	file_adarender_proto_rawDesc = nil
	file_adarender_proto_goTypes = nil
	file_adarender_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AdaRenderServiceClient is the client API for AdaRenderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdaRenderServiceClient interface {
	// render - render markdown
	Render(ctx context.Context, opts ...grpc.CallOption) (AdaRenderService_RenderClient, error)
}

type adaRenderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdaRenderServiceClient(cc grpc.ClientConnInterface) AdaRenderServiceClient {
	return &adaRenderServiceClient{cc}
}

func (c *adaRenderServiceClient) Render(ctx context.Context, opts ...grpc.CallOption) (AdaRenderService_RenderClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AdaRenderService_serviceDesc.Streams[0], "/adarender.AdaRenderService/render", opts...)
	if err != nil {
		return nil, err
	}
	x := &adaRenderServiceRenderClient{stream}
	return x, nil
}

type AdaRenderService_RenderClient interface {
	Send(*MarkdownStream) error
	Recv() (*HTMLStream, error)
	grpc.ClientStream
}

type adaRenderServiceRenderClient struct {
	grpc.ClientStream
}

func (x *adaRenderServiceRenderClient) Send(m *MarkdownStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *adaRenderServiceRenderClient) Recv() (*HTMLStream, error) {
	m := new(HTMLStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AdaRenderServiceServer is the server API for AdaRenderService service.
type AdaRenderServiceServer interface {
	// render - render markdown
	Render(AdaRenderService_RenderServer) error
}

// UnimplementedAdaRenderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAdaRenderServiceServer struct {
}

func (*UnimplementedAdaRenderServiceServer) Render(AdaRenderService_RenderServer) error {
	return status.Errorf(codes.Unimplemented, "method Render not implemented")
}

func RegisterAdaRenderServiceServer(s *grpc.Server, srv AdaRenderServiceServer) {
	s.RegisterService(&_AdaRenderService_serviceDesc, srv)
}

func _AdaRenderService_Render_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AdaRenderServiceServer).Render(&adaRenderServiceRenderServer{stream})
}

type AdaRenderService_RenderServer interface {
	Send(*HTMLStream) error
	Recv() (*MarkdownStream, error)
	grpc.ServerStream
}

type adaRenderServiceRenderServer struct {
	grpc.ServerStream
}

func (x *adaRenderServiceRenderServer) Send(m *HTMLStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *adaRenderServiceRenderServer) Recv() (*MarkdownStream, error) {
	m := new(MarkdownStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AdaRenderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "adarender.AdaRenderService",
	HandlerType: (*AdaRenderServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "render",
			Handler:       _AdaRenderService_Render_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "adarender.proto",
}
