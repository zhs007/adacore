// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.2
// source: adacore.proto

package adacorepb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// ResourceType - resource type
type ResourceType int32

const (
	// RT_PAGE - This is a page
	ResourceType_RT_PAGE ResourceType = 0
	// RT_OTHER - This is other resource
	ResourceType_RT_OTHER ResourceType = 1
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "RT_PAGE",
		1: "RT_OTHER",
	}
	ResourceType_value = map[string]int32{
		"RT_PAGE":  0,
		"RT_OTHER": 1,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_adacore_proto_enumTypes[0].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_adacore_proto_enumTypes[0]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_adacore_proto_rawDescGZIP(), []int{0}
}

// MarkdownData - markdown data
type MarkdownData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// strData - markdown string data
	StrData string `protobuf:"bytes,1,opt,name=strData,proto3" json:"strData,omitempty"`
	// binaryData - binary data map, it's like images
	BinaryData map[string][]byte `protobuf:"bytes,2,rep,name=binaryData,proto3" json:"binaryData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// hashName - hashname
	HashName string `protobuf:"bytes,3,opt,name=hashName,proto3" json:"hashName,omitempty"`
	// templateName - template Name
	TemplateName string `protobuf:"bytes,10,opt,name=templateName,proto3" json:"templateName,omitempty"`
	// templateData - template data
	TemplateData string `protobuf:"bytes,11,opt,name=templateData,proto3" json:"templateData,omitempty"`
	// expireTime - expire time in seconds
	ExpireTime int32 `protobuf:"varint,100,opt,name=expireTime,proto3" json:"expireTime,omitempty"`
	// ctrlKey - Control keys are generated and managed by the client
	CtrlKey int32 `protobuf:"varint,101,opt,name=ctrlKey,proto3" json:"ctrlKey,omitempty"`
}

func (x *MarkdownData) Reset() {
	*x = MarkdownData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adacore_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkdownData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkdownData) ProtoMessage() {}

func (x *MarkdownData) ProtoReflect() protoreflect.Message {
	mi := &file_adacore_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkdownData.ProtoReflect.Descriptor instead.
func (*MarkdownData) Descriptor() ([]byte, []int) {
	return file_adacore_proto_rawDescGZIP(), []int{0}
}

func (x *MarkdownData) GetStrData() string {
	if x != nil {
		return x.StrData
	}
	return ""
}

func (x *MarkdownData) GetBinaryData() map[string][]byte {
	if x != nil {
		return x.BinaryData
	}
	return nil
}

func (x *MarkdownData) GetHashName() string {
	if x != nil {
		return x.HashName
	}
	return ""
}

func (x *MarkdownData) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *MarkdownData) GetTemplateData() string {
	if x != nil {
		return x.TemplateData
	}
	return ""
}

func (x *MarkdownData) GetExpireTime() int32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *MarkdownData) GetCtrlKey() int32 {
	if x != nil {
		return x.CtrlKey
	}
	return 0
}

// MarkdownStream - markdown stream data
type MarkdownStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// totalLength - If the message is too long, it will send data in multiple msg, this is the total length.
	TotalLength int32 `protobuf:"varint,1,opt,name=totalLength,proto3" json:"totalLength,omitempty"`
	// curStart - The starting point of the current data (in bytes).
	CurStart int32 `protobuf:"varint,2,opt,name=curStart,proto3" json:"curStart,omitempty"`
	// curLength - The length of the current data (in bytes).
	CurLength int32 `protobuf:"varint,3,opt,name=curLength,proto3" json:"curLength,omitempty"`
	// hashData - This is the hash of each paragraph.
	HashData string `protobuf:"bytes,4,opt,name=hashData,proto3" json:"hashData,omitempty"`
	// totalHashData - If multiple messages return data, this is the hash value of all data, only sent in the last message.
	TotalHashData string `protobuf:"bytes,5,opt,name=totalHashData,proto3" json:"totalHashData,omitempty"`
	// data - binary data
	Data []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	// error - error string
	Error string `protobuf:"bytes,100,opt,name=error,proto3" json:"error,omitempty"`
	// markdownData - If the data does not exceed 4mb, this is the data that is directly available.
	MarkdownData *MarkdownData `protobuf:"bytes,200,opt,name=markdownData,proto3" json:"markdownData,omitempty"`
	// token - API token
	Token string `protobuf:"bytes,300,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *MarkdownStream) Reset() {
	*x = MarkdownStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adacore_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkdownStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkdownStream) ProtoMessage() {}

func (x *MarkdownStream) ProtoReflect() protoreflect.Message {
	mi := &file_adacore_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkdownStream.ProtoReflect.Descriptor instead.
func (*MarkdownStream) Descriptor() ([]byte, []int) {
	return file_adacore_proto_rawDescGZIP(), []int{1}
}

func (x *MarkdownStream) GetTotalLength() int32 {
	if x != nil {
		return x.TotalLength
	}
	return 0
}

func (x *MarkdownStream) GetCurStart() int32 {
	if x != nil {
		return x.CurStart
	}
	return 0
}

func (x *MarkdownStream) GetCurLength() int32 {
	if x != nil {
		return x.CurLength
	}
	return 0
}

func (x *MarkdownStream) GetHashData() string {
	if x != nil {
		return x.HashData
	}
	return ""
}

func (x *MarkdownStream) GetTotalHashData() string {
	if x != nil {
		return x.TotalHashData
	}
	return ""
}

func (x *MarkdownStream) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MarkdownStream) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *MarkdownStream) GetMarkdownData() *MarkdownData {
	if x != nil {
		return x.MarkdownData
	}
	return nil
}

func (x *MarkdownStream) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// ResourceInfo - resource infomation
type ResourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hashName - hashname
	HashName string `protobuf:"bytes,1,opt,name=hashName,proto3" json:"hashName,omitempty"`
	// citedTimes - cited times
	CitedTimes int32 `protobuf:"varint,2,opt,name=citedTimes,proto3" json:"citedTimes,omitempty"`
	// createTime - Creation time in seconds
	CreateTime int64 `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime,omitempty"`
	// type - resource type
	Type ResourceType `protobuf:"varint,4,opt,name=type,proto3,enum=adacorepb.ResourceType" json:"type,omitempty"`
	// children - children resource hashname
	Children []string `protobuf:"bytes,10,rep,name=children,proto3" json:"children,omitempty"`
	// expireTime - expire time in seconds
	ExpireTime int32 `protobuf:"varint,100,opt,name=expireTime,proto3" json:"expireTime,omitempty"`
	// ctrlKey - Control keys are generated and managed by the client
	CtrlKey int32 `protobuf:"varint,101,opt,name=ctrlKey,proto3" json:"ctrlKey,omitempty"`
}

func (x *ResourceInfo) Reset() {
	*x = ResourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adacore_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceInfo) ProtoMessage() {}

func (x *ResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_adacore_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceInfo.ProtoReflect.Descriptor instead.
func (*ResourceInfo) Descriptor() ([]byte, []int) {
	return file_adacore_proto_rawDescGZIP(), []int{2}
}

func (x *ResourceInfo) GetHashName() string {
	if x != nil {
		return x.HashName
	}
	return ""
}

func (x *ResourceInfo) GetCitedTimes() int32 {
	if x != nil {
		return x.CitedTimes
	}
	return 0
}

func (x *ResourceInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ResourceInfo) GetType() ResourceType {
	if x != nil {
		return x.Type
	}
	return ResourceType_RT_PAGE
}

func (x *ResourceInfo) GetChildren() []string {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *ResourceInfo) GetExpireTime() int32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *ResourceInfo) GetCtrlKey() int32 {
	if x != nil {
		return x.CtrlKey
	}
	return 0
}

// ReplyMarkdown - reply
type ReplyMarkdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url - url
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// hashName - hashname
	HashName string `protobuf:"bytes,2,opt,name=hashName,proto3" json:"hashName,omitempty"`
	// lstRes - resource list
	LstRes []*ResourceInfo `protobuf:"bytes,10,rep,name=lstRes,proto3" json:"lstRes,omitempty"`
	// err - error
	Err string `protobuf:"bytes,100,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ReplyMarkdown) Reset() {
	*x = ReplyMarkdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adacore_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyMarkdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyMarkdown) ProtoMessage() {}

func (x *ReplyMarkdown) ProtoReflect() protoreflect.Message {
	mi := &file_adacore_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyMarkdown.ProtoReflect.Descriptor instead.
func (*ReplyMarkdown) Descriptor() ([]byte, []int) {
	return file_adacore_proto_rawDescGZIP(), []int{3}
}

func (x *ReplyMarkdown) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ReplyMarkdown) GetHashName() string {
	if x != nil {
		return x.HashName
	}
	return ""
}

func (x *ReplyMarkdown) GetLstRes() []*ResourceInfo {
	if x != nil {
		return x.LstRes
	}
	return nil
}

func (x *ReplyMarkdown) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

// RoleInfo - role infomation
type TokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// token - token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// maxExpireTime - max expire time in seconds
	MaxExpireTime int32 `protobuf:"varint,2,opt,name=maxExpireTime,proto3" json:"maxExpireTime,omitempty"`
	// isAllowTemplateData - Whether to allow templatedata
	IsAllowTemplateData bool `protobuf:"varint,3,opt,name=isAllowTemplateData,proto3" json:"isAllowTemplateData,omitempty"`
	// templates - This is all the templates available for this role.
	Templates []string `protobuf:"bytes,4,rep,name=templates,proto3" json:"templates,omitempty"`
	// resNums - This is the amount of resources available for this role
	ResNums int32 `protobuf:"varint,5,opt,name=resNums,proto3" json:"resNums,omitempty"`
}

func (x *TokenInfo) Reset() {
	*x = TokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_adacore_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenInfo) ProtoMessage() {}

func (x *TokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_adacore_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenInfo.ProtoReflect.Descriptor instead.
func (*TokenInfo) Descriptor() ([]byte, []int) {
	return file_adacore_proto_rawDescGZIP(), []int{4}
}

func (x *TokenInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TokenInfo) GetMaxExpireTime() int32 {
	if x != nil {
		return x.MaxExpireTime
	}
	return 0
}

func (x *TokenInfo) GetIsAllowTemplateData() bool {
	if x != nil {
		return x.IsAllowTemplateData
	}
	return false
}

func (x *TokenInfo) GetTemplates() []string {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *TokenInfo) GetResNums() int32 {
	if x != nil {
		return x.ResNums
	}
	return 0
}

var File_adacore_proto protoreflect.FileDescriptor

var file_adacore_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x64, 0x61, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x61, 0x64, 0x61, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x22, 0xce, 0x02, 0x0a, 0x0c, 0x4d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x64, 0x61, 0x63,
	0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x74, 0x72, 0x6c, 0x4b, 0x65, 0x79, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x74, 0x72, 0x6c, 0x4b, 0x65, 0x79, 0x1a, 0x3d, 0x0a, 0x0f,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x02, 0x0a, 0x0e,
	0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x75, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x75, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61,
	0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61,
	0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48,
	0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x61, 0x64, 0x61, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0xac, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xed, 0x01, 0x0a, 0x0c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x69,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x64, 0x61, 0x63, 0x6f, 0x72, 0x65,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x74, 0x72, 0x6c, 0x4b, 0x65, 0x79, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x63, 0x74, 0x72, 0x6c, 0x4b, 0x65, 0x79, 0x22, 0x80, 0x01, 0x0a, 0x0d,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x6c,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x64,
	0x61, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6c, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x72, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xb1,
	0x01, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x4e,
	0x75, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x73, 0x4e, 0x75,
	0x6d, 0x73, 0x2a, 0x29, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x54, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x32, 0x5e, 0x0a,
	0x0e, 0x41, 0x64, 0x61, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x4c, 0x0a, 0x11, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x19, 0x2e, 0x61, 0x64, 0x61, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a,
	0x18, 0x2e, 0x61, 0x64, 0x61, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x00, 0x28, 0x01, 0x42, 0x25, 0x5a,
	0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x68, 0x73, 0x30,
	0x30, 0x37, 0x2f, 0x61, 0x64, 0x61, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x64, 0x61, 0x63, 0x6f,
	0x72, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_adacore_proto_rawDescOnce sync.Once
	file_adacore_proto_rawDescData = file_adacore_proto_rawDesc
)

func file_adacore_proto_rawDescGZIP() []byte {
	file_adacore_proto_rawDescOnce.Do(func() {
		file_adacore_proto_rawDescData = protoimpl.X.CompressGZIP(file_adacore_proto_rawDescData)
	})
	return file_adacore_proto_rawDescData
}

var file_adacore_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_adacore_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_adacore_proto_goTypes = []interface{}{
	(ResourceType)(0),      // 0: adacorepb.ResourceType
	(*MarkdownData)(nil),   // 1: adacorepb.MarkdownData
	(*MarkdownStream)(nil), // 2: adacorepb.MarkdownStream
	(*ResourceInfo)(nil),   // 3: adacorepb.ResourceInfo
	(*ReplyMarkdown)(nil),  // 4: adacorepb.ReplyMarkdown
	(*TokenInfo)(nil),      // 5: adacorepb.TokenInfo
	nil,                    // 6: adacorepb.MarkdownData.BinaryDataEntry
}
var file_adacore_proto_depIdxs = []int32{
	6, // 0: adacorepb.MarkdownData.binaryData:type_name -> adacorepb.MarkdownData.BinaryDataEntry
	1, // 1: adacorepb.MarkdownStream.markdownData:type_name -> adacorepb.MarkdownData
	0, // 2: adacorepb.ResourceInfo.type:type_name -> adacorepb.ResourceType
	3, // 3: adacorepb.ReplyMarkdown.lstRes:type_name -> adacorepb.ResourceInfo
	2, // 4: adacorepb.AdaCoreService.buildWithMarkdown:input_type -> adacorepb.MarkdownStream
	4, // 5: adacorepb.AdaCoreService.buildWithMarkdown:output_type -> adacorepb.ReplyMarkdown
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_adacore_proto_init() }
func file_adacore_proto_init() {
	if File_adacore_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_adacore_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkdownData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adacore_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkdownStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adacore_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adacore_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyMarkdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_adacore_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_adacore_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_adacore_proto_goTypes,
		DependencyIndexes: file_adacore_proto_depIdxs,
		EnumInfos:         file_adacore_proto_enumTypes,
		MessageInfos:      file_adacore_proto_msgTypes,
	}.Build()
	File_adacore_proto = out.File
	file_adacore_proto_rawDesc = nil
	file_adacore_proto_goTypes = nil
	file_adacore_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AdaCoreServiceClient is the client API for AdaCoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdaCoreServiceClient interface {
	// buildWithMarkdown - build with markdown
	BuildWithMarkdown(ctx context.Context, opts ...grpc.CallOption) (AdaCoreService_BuildWithMarkdownClient, error)
}

type adaCoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdaCoreServiceClient(cc grpc.ClientConnInterface) AdaCoreServiceClient {
	return &adaCoreServiceClient{cc}
}

func (c *adaCoreServiceClient) BuildWithMarkdown(ctx context.Context, opts ...grpc.CallOption) (AdaCoreService_BuildWithMarkdownClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AdaCoreService_serviceDesc.Streams[0], "/adacorepb.AdaCoreService/buildWithMarkdown", opts...)
	if err != nil {
		return nil, err
	}
	x := &adaCoreServiceBuildWithMarkdownClient{stream}
	return x, nil
}

type AdaCoreService_BuildWithMarkdownClient interface {
	Send(*MarkdownStream) error
	CloseAndRecv() (*ReplyMarkdown, error)
	grpc.ClientStream
}

type adaCoreServiceBuildWithMarkdownClient struct {
	grpc.ClientStream
}

func (x *adaCoreServiceBuildWithMarkdownClient) Send(m *MarkdownStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *adaCoreServiceBuildWithMarkdownClient) CloseAndRecv() (*ReplyMarkdown, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReplyMarkdown)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AdaCoreServiceServer is the server API for AdaCoreService service.
type AdaCoreServiceServer interface {
	// buildWithMarkdown - build with markdown
	BuildWithMarkdown(AdaCoreService_BuildWithMarkdownServer) error
}

// UnimplementedAdaCoreServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAdaCoreServiceServer struct {
}

func (*UnimplementedAdaCoreServiceServer) BuildWithMarkdown(AdaCoreService_BuildWithMarkdownServer) error {
	return status.Errorf(codes.Unimplemented, "method BuildWithMarkdown not implemented")
}

func RegisterAdaCoreServiceServer(s *grpc.Server, srv AdaCoreServiceServer) {
	s.RegisterService(&_AdaCoreService_serviceDesc, srv)
}

func _AdaCoreService_BuildWithMarkdown_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AdaCoreServiceServer).BuildWithMarkdown(&adaCoreServiceBuildWithMarkdownServer{stream})
}

type AdaCoreService_BuildWithMarkdownServer interface {
	SendAndClose(*ReplyMarkdown) error
	Recv() (*MarkdownStream, error)
	grpc.ServerStream
}

type adaCoreServiceBuildWithMarkdownServer struct {
	grpc.ServerStream
}

func (x *adaCoreServiceBuildWithMarkdownServer) SendAndClose(m *ReplyMarkdown) error {
	return x.ServerStream.SendMsg(m)
}

func (x *adaCoreServiceBuildWithMarkdownServer) Recv() (*MarkdownStream, error) {
	m := new(MarkdownStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AdaCoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "adacorepb.AdaCoreService",
	HandlerType: (*AdaCoreServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "buildWithMarkdown",
			Handler:       _AdaCoreService_BuildWithMarkdown_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "adacore.proto",
}
